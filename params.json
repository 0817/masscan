{"name":"Masscan","tagline":"TCP port scanner, spews SYN packets asynchronously, scanning entire Internet in under 5 minutes.","body":"# MASSCAN: Mass IP port scanner\r\n\r\nThis is the fastest Internet port scanner. It can scan the entire Internet\r\nin under 6 minutes, transmitting 10 million packets per second.\r\n\r\nIt produces results similar to `nmap`, the most famous port scanner.\r\nInternally, it operates more like `scanrand`, `unicornscan`, and `ZMap`, using\r\nasynchronous transmission. The major difference is that it's faster than these\r\nother scanners. In addition, it's more flexible, allowing arbitrary address\r\nranges and port ranges.\r\n\r\n\r\n# Building\r\n\r\nOn Debian/Ubuntu, it goes something like this:\r\n\r\n\t$ git clone https://github.com/robertdavidgraham/masscan\r\n\t$ cd masscan\r\n\t$ sudo apt-get install libpcap-dev\r\n\t$ make\r\n\r\nThis puts the program in the `masscan/bin` subdirectory. You'll have to\r\nmanually copy it to something like `/usr/local/bin` if you want to\r\ninstall it elsewhere on the system.\r\n\r\nWhile Linux is the primary target platform, the code runs well on many other\r\nsystems. Here's some additional build info:\r\n* Windows w/ Visual Studio: use the VS10 project\r\n* Windows w/ MingGW: just type `make`\r\n* Windows w/ cygwin: won't work\r\n* Mac OS X /w XCode: use the XCode4 project\r\n* Mac OS X /w cmdline: just type `make`\r\n* FreeBSD: type `gmake`\r\n* other: I don't know, don't care\r\n\r\n\r\n## PF_RING\r\n\r\nTo get beyond 2 million packets/second, you need an Intel 10-gbps Ethernet\r\nadapter and a special driver known as \"PF_RING DNA\" from http://www.netop.org.\r\nMasscan doesn't need to be rebuilt in order to use PF_RING. To use PF_RING,\r\nyou need to build the following components:\r\n* `libpfring.so` (installed in /usr/lib/libpfring.so)\r\n* `pf_ring.ko` (their kernel driver)\r\n* `ixgbe.ko` (their version of the Intel 10-gbps Ethernet driver)\r\n\r\nYou don't need to build their version of `libpcap.so`.\r\n\r\nWhen Masscan detects that an adapter is named something like `dna0` instead\r\nof something like `eth0`, it'll automatically switch to PF_RING mode.\r\n\r\n\r\n## Regression testing\r\n\r\nThe project contains a built-in self-test:\r\n\r\n\t$ make regress\r\n\tbin/masscan --regress\r\n\tselftest: success!\r\n\r\nThis tests a lot of tricky bits of the code. You should do this after building.\r\n\r\n\r\n## Performance testing\r\n\r\nTo test performance, run something like the following:\r\n\r\n\t$ bin/masscan 0.0.0.0/4 -p80 --rate 100000000 --router-mac 66-55-44-33-22-11\r\n\r\nThe bogus `--router-mac` keeps packets on the local network segments so that\r\nthey won't go out to the Internet.\r\n\r\nYou can also test in \"offline\" mode, which is how fast the program runs\r\nwithout the transmit overhead:\r\n\r\n\t$ bin/masscan 0.0.0.0/4 -p80 --rate 100000000 --offline\r\n    \r\nThis second benchmark shows roughly how fast the program would run if it were\r\nusing PF_RING, which has near zero overhead.\r\n\r\n\r\n# Usage\r\n\r\nUsage is similar to `nmap`. To scan a network segment for some ports:\r\n\r\n\t# masscan -p80,8000-8100 10.0.0.0/8\r\n\r\nThis will:\r\n* scan the 10.x.x.x subnet, all 16 million addresses\r\n* scans port 80 and the range 8000 to 8100, or 102 addresses total\r\n* print output to <stdout> that can be redirected to a file\r\n\r\nTo see the complete list of options, use the `--echo` feature. This\r\ndumps the current configuration and exits. This ouput can be used as input back\r\ninto the program:\r\n\r\n\t# masscan -p80,8000-8100 10.0.0.0/8 --echo > xxx.conf\r\n\t# masscan -c xxx.conf --rate 1000\r\n\r\n\r\n## How to scan the entire Internet\r\n\r\nWhile useful for smaller, internal networks, the program is designed really\r\nwith the entire Internet in mind. It might look something like this:\r\n\r\n\t# masscan 0.0.0.0/0 -p0-65535\r\n\r\nScanning the entire Internet is bad. For one thing, parts of the Internet react\r\nbadly to being scanned. For another thing, some sites track scans and add you\r\nto a ban list, which will get you firewalled from useful parts of the Internet.\r\nTherefore, you want to exlude a lot of ranges. To blacklist or exclude ranges,\r\nyou want to use the following syntax:\r\n\r\n\t# masscan 0.0.0.0/0 -p0-65535 --excludefile exclude.txt\r\n\r\nThis just prints the results to the command-line. You probably want them\r\nsaved to a file instead. Therefore, you want something like:\r\n\r\n\t# masscan 0.0.0.0/0 -p0-65535 -oX scan.xml\r\n\r\nThis saves the results in an XML file, allowing you to easily dump the\r\nresults in a database or something.\r\n\r\nBut, this only goes at the default rate of 100 packets/second, which will\r\ntake forever to scan the Internet. You need to speed it up as so:\r\n\r\n\t# masscan 0.0.0.0/0 -p0-65535 --max-rate 100000\r\n\r\nThis increases the rate to 100,000 packets/second, which will scan the\r\nentire Internet (minus excludes) in about 10 hours per port (or 655,360 hours\r\nif scanning all ports).\r\n\r\nThe thing to notice about this command-line is that these are all `nmap`\r\ncompatible options. In addition, \"invisible\" options compatible with `nmap`\r\nare also set for you: `-sS -Pn -n --randomize-hosts --send-eth`. Likewise,\r\nthe format of the XML file is inspired by `nmap`. There are, of course, a\r\nlot of differences, because the *asynchronous* nature of the program\r\nleads to a fundamentally different approach to the problem.\r\n\r\nThe above command-line is a bit cumbersome. Instead of putting everything\r\non the command-line, it can be stored in a file instead. The above settings\r\nwould look like this:\r\n\r\n\t# My Scan\r\n\trate =  100000.00\r\n\toutput-format = xml\r\n\toutput-status = all\r\n\toutput-filename = scan.xml\r\n\tports = 0-65535\r\n\trange = 0.0.0.0-255.255.255.255\r\n\texcludefile = exclude.txt\r\n\r\nTo use this configuration file, use the `-c`:\r\n\r\n\t# masscan -c myscan.conf\r\n\r\nThis also makes things easier when you repeat a scan.\r\n\r\nBy default, masscan first loads the configuration file \r\n`/etc/masscan/masscan.conf`. Any later configuration parameters override what's\r\nin this default configuration file. That's where I put my \"excludefile\" \r\nparameter, so that I don't ever forget it. It just works automatically.\r\n\r\n## Getting output\r\n\r\nThe are two primary formats for output. The first is XML, which products\r\nfairly large files, but is easy to import into anything. Just use the\r\nparameter `-oX <filename>`. Or, use the parameters `--output-format xml` and\r\n`--output-filename <filename>`.\r\n\r\nThe second is the binary format. This produces much smaller files, so that\r\nwhen I scan the Internet my disk doesn't fill up. They need to be parsed,\r\nthough. In the `util` subdirectory there is a program `scan2text.c` that will\r\nscan in the binary format and produce text.\r\n\r\n\r\n## Comparison with Nmap\r\n\r\nWhere reasonable, every effort has been taken to make the program familiar\r\nto `nmap` users, even though it's fundamentally different. Two important\r\ndifferences are:\r\n\r\n* no default ports to scan, you must specify `-p <ports>`\r\n* target hosts are IP addresses or simple ranges, not DNS names, nor \r\n  the funky subnet ranges `nmap` can use (like `10.0.0-255.0-255`).\r\n\r\nYou can think of `masscan` as having the following settings permanently\r\nenabled:\r\n* `-sS`: this does SYN scan only (currently, will change in future)\r\n* `-Pn`: doesn't ping hosts first, which is fundamental to the async operation\r\n* `-n`: no DNS resolution happens\r\n* `--randomize-hosts`: scan completely randomized\r\n* `--send-eth`: sends using raw `libpcap`\r\n\r\nIf you want a list of additional `nmap` compatible settings, use the following\r\ncommand:\r\n\r\n\t# masscan --nmap\r\n\r\n\r\n## Transmit rate (IMPORTANT!!)\r\n\r\nThis program spews out packets very fast. On Windows, or from VMs,\r\nit can do 300,000 packets/second. On a Linux (no virtualization) it'll\r\ndo 1.6 million packets-per-second. That's fast enough to melt most networks.\r\n\r\nNote that it'll only melt your own network. It randomizes the target\r\nIP addresses so that it shouldn't overwhelm any distant network.\r\n\r\nBy default, the rate is set to 100 packets/second. To increase the rate to\r\na million use something like `--rate 1000000`.\r\n\r\n\r\n\r\n# Design\r\n\r\nThis section describes the major design issues of the program.\r\n\r\n## Code Layout\r\n\r\nThe file `main.c` contains the `main()` function, as you'd expect. It also\r\ncontains the `transmit_thread()` and `receive_thread()` functions. These\r\nfunctions have been deliberately flattened and heavily commented so that you\r\ncan read the design of the program simply by stepping line-by-line through\r\neach of these.\r\n\r\n## Asynchronous\r\n\r\nThis is an *asynchronous* design. In other words, it is to `nmap` what\r\nthe `nginx` web-server is to `Apache`. It has separate transmit and receive\r\nthreads that are largely independent from each other. It's the same sort of\r\ndesign found in `scanrand`, `unicornscan`, and `ZMap`.\r\n\r\nBecause it's asynchronous, it runs as fast as the underlying packet transmit\r\nallows.\r\n\r\n\r\n## Randomization\r\n\r\nA key difference between Masscan and other scanners is the way it randomizes\r\ntargets.\r\n\r\nThe fundamental principle is to have a single index variable that starts at\r\nzero and is incremented by one for every probe. In C code, this is expressed\r\nas:\r\n\r\n    for (i = 0; i < range; i++) {\r\n        scan(i);\r\n    }\r\n\r\nWe have to translate the index into an IP address. Let's say that you want to\r\nscan all \"private\" IP addresses. That would be the table of ranges like:\r\n    \r\n    192.168.0.0/16\r\n    10.0.0.0/8\r\n    172.16.0.0/20\r\n\r\nIn this example, the first 64k indexes are appended to 192.168.x.x to form\r\nthe target address. Then, the next 16-million are appenedd to 10.x.x.x.\r\nThe remaining indexes in the range are applied to 172.16.x.x.\r\n\r\nIn this example, we only have three ranges. When scanning the entire Internet,\r\nwe have in practice more than 100 ranges. That's because you have to blacklist\r\nor exlude a lot of sub-ranges. This chops up the desired range into hundreds\r\nof smaller ranges.\r\n\r\nThis leads to one of the slowest parts of the code. We transmit 10 million\r\npackets per second, and have to convert an index variable to an IP address\r\nfor each and every probe. We solve this by doing a \"binary search\" in a small\r\namount of memory. At this packet rate, cache efficiencies start to dominate\r\nover algorithm efficiencies. There are a lot of more efficient techniques in\r\ntheory, but they all require so much memory as to be slower in practice.\r\n\r\nWe call the function that translates from an index into an IP address\r\nthe `pick()` function. In use, it looks like:\r\n\r\n    for (i = 0; i < range; i++) {\r\n        ip = pick(addresses, i);\r\n        scan(ip);\r\n    }\r\n\r\nMasscan supports not only IP address ranges, but also port ranges. This means\r\nwe need to pick from the index variable both an IP address and a port. This\r\nis fairly straight forward:\r\n\r\n    range = ip_count * port_count;\r\n    for (i = 0; i < range; i++) {\r\n        ip   = pick(addresses, i / port_count);\r\n        port = pick(ports,     i % port_count);\r\n        scan(ip, port);\r\n    }\r\n\r\nThis leads to another expensive part of the code. The division/modulus\r\ninstructions are around 90 clock cycles, or 30 nanoseconds, on x86 CPUs. When\r\ntransmitting at a rate of 10 million packets/second, we have only\r\n100 nanoseconds per packet. I see now way to optimize this any better. Luckily,\r\nthough, two such operations can be executed simultaneously, so doing two \r\nof these as shown above is no more expesive than doing one.\r\n\r\nThere are actually some easy optimizations for the above performance problems,\r\nbut they all rely upon `i++`, the fact that the index variable increases one\r\nby one through the scan. Actually, we need to randomize this variable. We\r\nneed to randomize the order of IP addresses that we scan or we'll blast the\r\nheck out of target networks that aren't built for this level of speed. We \r\nneed to spread our traffic evenly over the target.\r\n\r\nThe way we randomize is simply by encrypting the index variable. By definition,\r\nencryption is random, and creates a 1-to-1 mapping between the original index\r\nvariable and the output. This means that while we linearly go through the\r\nrange, the output IP addresse are completely random. In code, this looks like:\r\n\r\n    range = ip_count * port_count;\r\n    for (i = 0; i < range; i++) {\r\n        x = encrypt(i);\r\n        ip   = pick(addresses, x / port_count);\r\n        port = pick(ports,     x % port_count);\r\n        scan(ip, port);\r\n    }\r\n\r\nThis also has a major cost. Since the range is an unpredictable size instead\r\nof a nice even power of 2, we can't use cheap binary techniques like\r\nAND (&) and XOR (^). Instead, we have to use expensive operations like \r\nMODULUS (%). In my current benchmarks, it's taking 40 nanoseconds to\r\nencrypt the variable.\r\n\r\nThis architecture allows for lots of cool features. For example, it supports\r\n\"shards\". You can setup 5 machines each doing a fifth of the scan, or\r\n`range / shard_count`. Shards can be multiple machines, or simply multiple\r\nnetwork adapters on the same machine, or even (if you want) multiple IP\r\nsource addresses on the same network adapter\r\n\r\nOr, you can use a 'seed' or 'key' to the encryption function, so that you get\r\na different order each time you scan, like `x = encrypt(seed, i)`.\r\n\r\nWe can also pause the scan by exiting out of the program, and simply\r\nremembering the current value of `i`, and restart it later. I do that a lot\r\nduring development. I see something going wrong with my Internet scan, so\r\nI hit <ctrl-c> to stop the scan, then restart it after I've fixed the bug.\r\n\r\nAnother feature is retransmits/retries. Packets sometimes get dropped on the\r\nInternet, so you can send two packets back-to-back. However, something that\r\ndrops one packet may drop the immediately following packet. Therefore, you\r\nwant to send the copy about 1 second apart. This is simple. We already have\r\na 'rate' variable, which is the number of packets-per-second rate we are\r\ntransmitting at, so the retransmit function is simply to use `i + rate`\r\nas the index. One of these days I'm going to do a study of the Internet,\r\nand differentiate \"back-to-back\", \"1 second\", \"10 second\", and \"1 minute\"\r\nretransmits this way in order to see if there is any difference in what\r\ngets dropped.\r\n\r\n\r\n\r\n## C10 Scalability\r\n\r\nThe asynchronous technique is known as a solution to the \"c10k problem\".\r\nMasscan is designed for the next level of scalability, the \"C10M problem\".\r\n\r\nThe C10M solution is to bypass the kernel. There are three primary kernel\r\nbypasses in Masscan:\r\n* custom network driver\r\n* user-mode TCP stack\r\n* user-mode synchronization\r\n\r\nMasscan can use the PF_RING DNA driver. This driver DMA's packets directly\r\nfrom user-mode memory to the network driver with zero kernel involvement.\r\nThat allows software, even with a slow CPU, to transmit packets at the maximum\r\nrate the hardware allows. If you put 8 10-gbps network cards in a computer,\r\nthis means it could transmit at 100-million packets/second.\r\n\r\nMasscan has it's own built-in TCP stack for grabbing banners from TCP\r\nconnections. It means it can easily support 10 million concurrent TCP\r\nconnections, assuming of course that the computer has enough memory.\r\n\r\nMasscan has no \"mutex\". Modern mutexes (aka. futexes) are mostly user-mode,\r\nbut they have two problems. The first problem is that they cause cache-lines\r\nto bounce quickly back-and-forth between CPUs. The second is that when there\r\nis contention, they'll do a system call into the kernel, which kills\r\nperformance. Mutexes on the fast path of a program severely limits scalability.\r\nInstead, Masscan uses \"rings\" to synchronize things, such as when the\r\nuser-mode TCP stack in the receive thread needs to transmit a packet without\r\ninterferring with the transmit thread.\r\n\r\n\r\n## Portability\r\n\r\nThe code runs well on Linux, Windows, and Mac OS X. All the importnat bits are\r\nin standard C (C90). It therefore compiles on Visual Studio with Microsoft's\r\ncompiler, the Clang/LLVM compiler on Mac OS X, and GCC on Linux.\r\n\r\nWindows and Macs aren't tuned for packet transmit, and get only about 300,000\r\npackets-per-second whereas Linux can do 1,500,000 packets/second. That's\r\nprobably faster than you want anyway.\r\n\r\n\r\n## Safe code\r\n\r\nA bounty is offered for vulnerabilities, see the VULNINFO.md file for more\r\ninformation.\r\n\r\nThis project uses safe functions like `strcpy_s()` instead of unsafe functions\r\nlike `strcpy()`.\r\n\r\nThis project as automated unit regression tests (`make regress`).\r\n\r\n\r\n## Compatibility\r\n\r\nA lot of effort has been made in make the input/output look like `nmap`, which\r\neveryone who does port scans is (or should be) familiar with.\r\n\r\n\r\n# Authors\r\n\r\nThis tool created by Robert Graham:\r\nemail: robert_david_graham@yahoo.com\r\ntwitter: @ErrataRob\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}